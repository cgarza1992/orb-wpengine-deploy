version: 2.1

description: |
    Commands, Executors, and Jobs for testing a WordPress site
    and for deploying to WP Engine installs.

orbs:
    rollbar: rollbar/deploy@1.0.1

executors:
    base:
        docker:
            - image:          circleci/php:7-apache-node-browsers-legacy
    wp-browser:
        docker:
            # TODO: Switch to tagged version when stable
            - image:          ryanshoover/wp-browser:latest
              environment:
                DB_USER:      wordpress
                DB_PASSWORD:  wordpress
                DB_NAME:      wordpress
                DB_HOST:      db
            - image:          circleci/mysql:5
              name:           db
              environment:
                MYSQL_ROOT_PASSWORD: password
                MYSQL_DATABASE:      wordpress
                MYSQL_USER:          wordpress
                MYSQL_PASSWORD:      wordpress
    backstop:
        docker:
            - image:          backstopjs/backstopjs

commands:
    install:
        description:          |
            General setup command. Handles cache, git checkout,
            composer install, and yarn install.
        parameters:
            production:
                description:  Is this a production build?
                type:         boolean
                default:      false
            cache-name:
                description:  Specific cache name for different executors
                type:         string
                default:      base
            include-composer:
                description:  Should composer skip dependencies?
                type:         boolean
                default:      false
            include-yarn:
                description:  Should yarn skip dependencies?
                type:         boolean
                default:      false
        steps:
            - checkout
            - restore_cache:
                keys:
                    - << parameters.cache-name >>-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "composer.lock" }}
                    - << parameters.cache-name >>-dependencies-
            - run:
                name:         Find composer and package in plugins & themes
                command:      |
                              echo 'export COMPOSER_DIRS=$(find . -regextype awk -regex "\./wp-content/(mu-plugins|plugins|themes)/(studiopress|wpengine)-[^/]*/composer.json" | sed "s|/[^/]*$||")' >> $BASH_ENV
                              echo 'export PACKAGE_DIRS=$(find . -regextype awk -regex "\./wp-content/(mu-plugins|plugins|themes)/(studiopress|wpengine)-[^/]*/package.json" | sed "s|/[^/]*$||")' >> $BASH_ENV
                              source $BASH_ENV
            - when:
                condition:    << parameters.include-composer >>
                steps:
                    - run:
                        name:         Install composer dependencies
                        command:      |
                            composer install <<# parameters.production >> --no-dev <</ parameters.production >> --no-ansi --no-interaction --optimize-autoloader --no-progress --prefer-dist
                    - run:
                        name:         Install plugin and theme composer dependencies
                        command:      |
                                    for COMPOSER_DIR in $COMPOSER_DIRS
                                    do
                                        echo "Installing in $COMPOSER_DIR"
                                        composer install --working-dir $COMPOSER_DIR <<# parameters.production >> --no-dev <</ parameters.production >> --no-ansi --no-interaction --optimize-autoloader --no-progress --prefer-dist
                                    done
            - when:
                condition:    << parameters.include-yarn >>
                steps:
                    - run:
                        name:         Install node dependencies
                        command:      |
                            yarn install <<# parameters.production >> --production <</ parameters.production >> --emoji false --no-progress --non-interactive
                    - run:
                        name:         Install plugin and theme node dependencies
                        command:      |
                                    for PACKAGE_DIR in $PACKAGE_DIRS
                                    do
                                        echo "Installing in $PACKAGE_DIR"
                                        yarn --cwd $PACKAGE_DIR install <<# parameters.production >> --production <</ parameters.production >> --emoji false --no-progress --non-interactive
                                    done
            - save_cache:
                paths:
                    - ./node_modules
                    - ./vendor
                key:          << parameters.cache-name >>-dependencies-{{ checksum "yarn.lock" }}-{{ checksum "composer.lock" }}

jobs:
    lint:
        description:                |
                                    Lint the files to make sure everything follows best practices.
                                    `yarn run lint` can be a combination of phpcs, jslint, sass-lint, and more
        executor:                   base
        steps:
            - install:
                production:         false
                cache-name:         yarn
                include-composer: false
                include-yarn:     true
            - run:
                name:               Run lint command
                command:            yarn run lint

    codeception:
        description:                |
                                    Run codeception tests for end-to-end testing.
                                    Codeception supports unit, wpunit, functional, and acceptance testing.
                                    This job is based on the Docker image managed at https://github.com/ryanshoover/docker-wp-browser
        executor:                   wp-browser
        steps:
            - install:
                production:         false
                cache-name:         wp-browser
                include-composer: true
                include-yarn:     false
            - run:
                name:               Make sure WordPress is loaded
                command:            /entrypoint.sh
            - run:
                name:               Run Codeception acceptance tests
                command:            codecept run acceptance --xml="test-results/acceptance/results.xml"
            - run:
                name:               Run Codeception functional tests
                command:            codecept run functional --xml="test-results/functional/results.xml"
            - run:
                name:               Run Codeception unit tests
                command:            codecept run unit --xml="test-results/unit/results.xml"
            - run:
                name:               Run Codeception wpunit tests
                command:            codecept run wpunit --xml="test-results/wpunit/results.xml"
            - store_test_results:
                path:               test-results

    backstop:
        description:                Run visual regression tests using backstopjs
        parameters:
            config:
                description:        Path to the backstop config file
                type:               string
        executor:                   backstop
        steps:
            - checkout
            - run:
                name:               Build reference files
                command:            backstop reference --config=<< parameters.config >>
            - run:
                name:               Test against staging site
                command:            backstop test --config=<< parameters.config >>
            - store_artifacts:
                path:               test-results
            - store_test_results:
                path:               test-results

    build_deploy:
        description:                Build and deploy the codebase to a WP Engine environment
        parameters:
            environment:
                description:        |
                                    Are we deploying to the production, staging, or development environment?
                                    Each of these environments needs a corresponding environment variable defined
                                    in CircleCI's project configuration. An optional `./.gitignores/__deployment`
                                    file can be used to deploy build files rather than source files.
                type:               enum
                enum:
                    - production
                    - staging
                    - development
        executor:                   base
        steps:
            - install:
                production:       true
                cache-name:       build
                include-composer: true
                include-yarn:     true
            - run:
                name:         Build compiled files
                command:      yarn run build
            - run:
                name:         Build plugin and theme compiled files
                command:      |
                              for PACKAGE_DIR in $PACKAGE_DIRS
                              do
                                if yarn --cwd $PACKAGE_DIR run --non-interactive | grep -e "- build"
                                then
                                    echo "Building in $PACKAGE_DIR"
                                    yarn --cwd $PACKAGE_DIR run build
                                fi
                              done

            # Add the git.wpengine.com fingerprint to our known hosts
            # We need to interact with this server. And the unknown host will trigger an interactive prompt.
            # The workaround is to manually add the fingerprint ourselves.
            # Note:           This will need updated if and when WP Engine updates the fingerprint
            - run:
                name:         Add deploy host to known_hosts
                command:      echo 'git.wpengine.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApRVAUwjz49VKfuENfyv52Dvh3qx9nWW/3Gb7R9pwABXUNQqkipt3aB7w2W6jOaEGFmzSr/4qhstUv0lvbeZu/1uRU/b6WrqULu+9bAdt9ll09QULfMxAIFWDwDS1F6GEZT+Yau/wLUI2VTZppxSVRIPe20/mxgXk8/Q9ha5tCaz+dQZ9lHWwk9rbDF+7LSVomLGM3e9dwr6mS4p37Qkje2cFJBqQcQ+RqEOTOD/xiFU0DH8TWO4R5yibQ0KEZVACkwhaAZSl81F7YZrrLEfsFS/llgpV3YZHQGvFi0x/ELAUJMFE9umdy9EwFF7/lTpV8zOGdiLW+v8svweWJJJ00w==' >> ~/.ssh/known_hosts

            # Set up our WPE_Install based on the environment
            - run:
                name:         Set up the WPE install name
                command:      |
                              echo 'export WPE_INSTALL=$( \
                                  case << parameters.environment >> in \
                                      production)  echo $WPE_PRODUCTION_INSTALL;; \
                                      staging)     echo $WPE_STAGING_INSTALL;; \
                                      development) echo $WPE_DEVELOPMENT_INSTALL;; \
                                  esac )' >> $BASH_ENV
                              source $BASH_ENV

            # Set up the git remotes for WP Engine
            - run:
                name:         Set up the WP Engine install git remotes
                command:      |
                              git config --global user.email "deploy@circleci.local"
                              git config --global user.name ${CIRCLE_PROJECT_REPONAME}
                              git remote add wpe git@git.wpengine.com:production/${WPE_INSTALL}.git
                              git fetch wpe

            # Commit our build version of the code
            - run:
                name:         Check out a new branch
                command:      git checkout -b ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
            - run:
                name:         Swap our gitignore files
                command:      |
                              [ -f ./.gitignores/__deployment ] && rm -f .gitignore && ln -s ./.gitignores/__deployment .gitignore
            - run:
                name:         Remove git files from packages to ensure correct deployment.
                command:      rm -rf wp-content/{mu-plugins,plugins,themes}/*/.git*
            - run:
                name:         Add all files for deployment
                command:      git add .
            - run:
                name:         After adding all files, remove files that should be ignored
                command:      git ls-files -z --ignored --exclude-standard | xargs -0 git rm -r --force --ignore-unmatch --cached
            - run:
                name:         Commit build files
                command:      git commit -m "Deployment commit"

            - when:
                condition:    ${ROLLBAR_ACCESS_TOKEN}
                steps:
                    - rollbar/notify_deploy_started:
                        environment: << parameters.environment >>

            - deploy:
                name:         Push to WPE environment
                command:      |
                              git push wpe  ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
                              git push wpe :${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}

            - when:
                condition:    ${ROLLBAR_ACCESS_TOKEN}
                steps:
                    - rollbar/notify_deploy_finished:
                        status:     succeeded
                        deploy_id:  ${ROLLBAR_DEPLOY_ID}
